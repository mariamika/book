{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///C:/wamp64/www/joomla/components/com_smartforms/plugin/js/formBuilder/formula/formulaCompiler/FormulaCompiler.ts","webpack:///C:/wamp64/www/joomla/components/com_smartforms/plugin/js/formBuilder/formula/formulaCompiler/Parser.ts","webpack:///C:/wamp64/www/joomla/components/com_smartforms/plugin/js/formBuilder/formula/formulaCompiler/Lexer.ts","webpack:///C:/wamp64/www/joomla/components/com_smartforms/plugin/js/formBuilder/formula/formulaCompiler/Token.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Parser_1","FormulaCompiler","stringToProcess","this","parser","Parser","Compile","Parse","window","Lexer_1","code","header","footer","variableCount","lexer","Lexer","currentToken","GetNextToken","eat","tokenType","Type","Expr","TokenType","Method","Value","CreateRootPromise","methodCode","parenthesesCount","RParen","LParen","variableName","Token_1","stringBuffer","currentIndex","length","AnalizeToken","currentChar","IsWhiteSpace","IsQuote","token","CreateQuotedString","IsParentheses","Token","IsSymbol","Whatever","quote","String","indexOf"],"mappings":"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","file":"formulacompiler_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import {Parser} from \"./Parser\";\r\n\r\nexport class FormulaCompiler{\r\n    private parser:Parser;\r\n\r\n    constructor(public stringToProcess:string){\r\n        this.parser=new Parser(this.stringToProcess);\r\n    }\r\n\r\n    public Compile():string{\r\n        return this.parser.Parse();\r\n    }\r\n\r\n\r\n}\r\n\r\n(window as any).FormulaCompiler=FormulaCompiler;","import {Lexer, TokenType} from \"./Lexer\";\r\nimport {Token} from \"./Token\";\r\nimport {NodeBase} from \"./Nodes/NodeBase\";\r\nimport {BinaryNode} from \"./Nodes/BinaryNode\";\r\nimport {WhateverNode} from \"./Nodes/WhateverNode\";\r\nimport {MethodNode} from \"./Nodes/MethodNode\";\r\nimport {SubExpressionNode} from \"./Nodes/SubExpressionNode\";\r\n/*\r\nexpr:(Method|String|Whatever)*\r\nmethod:Remote.Get lparen (expr |,expr) rparent;\r\nString: \"|` cadena \"|\r\nwhatever:todo lo que not tenga espacios\r\n */\r\nexport class Parser{\r\n    private lexer:Lexer;\r\n    private currentToken:Token;\r\n    private code:string='';\r\n    private header:string='';\r\n    private footer:string='';\r\n    private topCode:string;\r\n    private variableCount:number=0;\r\n    constructor(public stringToProcess:string){\r\n        this.lexer=new Lexer(this.stringToProcess);\r\n        this.currentToken=this.lexer.GetNextToken();\r\n    }\r\n\r\n    public eat(tokenType:TokenType)\r\n    {\r\n        if(this.currentToken.Type!=tokenType)\r\n            throw (\"Invalid Formula\");\r\n        else\r\n            this.currentToken=this.lexer.GetNextToken();\r\n    }\r\n\r\n    Parse() {\r\n        return this.Expr();\r\n    }\r\n\r\n    public Expr(): string {\r\n        while(this.currentToken!=null)\r\n        {\r\n            if(this.currentToken.Type!=TokenType.Method)\r\n            {\r\n                this.code+=this.currentToken.Value;\r\n            }else\r\n                this.code+=this.Method();\r\n            this.eat(this.currentToken.Type);\r\n        }\r\n        return this.CreateRootPromise();\r\n\r\n    }\r\n\r\n    public Method(){\r\n        let methodCode=this.currentToken.Value;\r\n        this.eat(TokenType.Method);\r\n        let parenthesesCount=-1;\r\n        while(this.currentToken!=null&&(this.currentToken.Type!=TokenType.RParen||parenthesesCount>0))\r\n        {\r\n            if((this.currentToken as any).Type==TokenType.RParen)\r\n                parenthesesCount--;\r\n            if(this.currentToken.Type==TokenType.LParen)\r\n                parenthesesCount++;\r\n           if(this.currentToken.Type==TokenType.Method)\r\n               methodCode+=this.Method();\r\n           else\r\n               methodCode+=this.currentToken.Value;\r\n\r\n           this.eat(this.currentToken.Type);\r\n        }\r\n        methodCode+=')';\r\n\r\n\r\n        let variableName='result'+this.variableCount;\r\n        this.header+=`${methodCode}.then(function(${variableName}){`;\r\n        this.variableCount++;\r\n        this.footer+='})';\r\n        return variableName;\r\n    }\r\n\r\n\r\n/*\r\n    public SubExpr():NodeBase{\r\n        let token = this.currentToken;\r\n        let node = null;\r\n\r\n        let newNode = null;\r\n        if (token.Type == TokenType.Method) {\r\n            newNode = this.Method();\r\n        }\r\n        else if(token.Type==TokenType.LParen)\r\n        {\r\n            this.eat(TokenType.LParen);\r\n            newNode=new SubExpressionNode();\r\n            newNode.SubExpr=this.SubExpr();\r\n            this.eat(TokenType.RParen);\r\n        }else if(token.Type==TokenType.RParen)\r\n            return null;\r\n        else\r\n            newNode = this.Whatever();\r\n\r\n        return newNode;\r\n    }\r\n\r\n    private Method():NodeBase {\r\n        let methodNode=new MethodNode();\r\n        methodNode.MethodToken=this.currentToken;\r\n        this.eat(TokenType.Method);\r\n        this.eat(TokenType.LParen);\r\n        methodNode.SubExpr=this.SubExpr();\r\n        this.eat(TokenType.RParen);\r\n        return methodNode;\r\n\r\n    }\r\n\r\n\r\n\r\n    private Whatever():NodeBase {\r\n        let whateverNode: WhateverNode = new WhateverNode();\r\n\r\n        while (true) {\r\n            if (this.currentToken.Type == TokenType.Method || this.currentToken == null||this.currentToken.Type==TokenType.RParen)\r\n                break;\r\n\r\n            if(this.currentToken.Type==TokenType.LParen)\r\n            {\r\n                return new BinaryNode(whateverNode,this.SubExpr());\r\n            }\r\n\r\n            whateverNode.ChildTokens.push(this.currentToken);\r\n            this.eat(this.currentToken.Type);\r\n        }\r\n\r\n        return whateverNode;\r\n    }*/\r\n    private CreateRootPromise() {\r\n        return `new Promise(function(sfInternalResolve){\r\n            ${this.header}\r\n                sfInternalResolve(${this.code});\r\n            ${this.footer}\r\n        });`\r\n    }\r\n}","\r\nimport {Token} from \"./Token\";\r\n\r\nexport class Lexer{\r\n    public currentIndex:number;\r\n    public stringBuffer:string='';\r\n    constructor(public stringToProcess:string)\r\n    {\r\n        this.currentIndex=-1;\r\n    }\r\n    public GetNextToken(){\r\n        this.currentIndex++;\r\n        if(this.stringToProcess.length<=this.currentIndex)\r\n            return this.AnalizeToken();\r\n\r\n        let currentChar=this.stringToProcess[this.currentIndex];\r\n\r\n\r\n        if(this.IsWhiteSpace(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else {\r\n                this.stringBuffer+=' ';\r\n                return this.AnalizeToken();\r\n            }\r\n        }else if(this.IsQuote(currentChar))\r\n        {\r\n            let token= this.CreateQuotedString();\r\n            this.stringBuffer='';\r\n            return token;\r\n        }else if(this.IsParentheses(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else\r\n            {\r\n                if(currentChar=='(')\r\n                    return new Token(TokenType.LParen,'(');\r\n                else\r\n                    return new Token(TokenType.RParen,')');\r\n            }\r\n\r\n        }else if(this.IsSymbol(currentChar))\r\n        {\r\n            if(this.stringBuffer.length>0) {\r\n                this.currentIndex--;\r\n                return this.AnalizeToken();\r\n            }\r\n            else\r\n                return new Token(TokenType.Symbol,currentChar);\r\n        }\r\n        else{\r\n            this.stringBuffer+=currentChar;\r\n            return this.GetNextToken();\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private AnalizeToken():Token {\r\n        if(this.stringBuffer.length==0)\r\n            return null;\r\n\r\n        let token:Token={Type:TokenType.Whatever,Value:this.stringBuffer};\r\n        if(this.stringBuffer=='Remote.Get'||this.stringBuffer=='Remote.Post')\r\n            token.Type=TokenType.Method;\r\n        this.stringBuffer=\"\";\r\n        return token;\r\n    }\r\n\r\n    private IsWhiteSpace(currentChar: string) {\r\n        return currentChar==' '||currentChar=='\\r'||currentChar=='\\t'||currentChar=='\\n';\r\n    }\r\n\r\n    private IsQuote(currentChar: string) {\r\n        return currentChar==\"'\"||currentChar==\"\\\"\";\r\n    }\r\n\r\n    private CreateQuotedString() {\r\n        let quote=this.stringToProcess[this.currentIndex];\r\n        this.stringBuffer+=quote;\r\n        this.currentIndex++;\r\n\r\n        while(this.currentIndex<this.stringToProcess.length&&(this.stringToProcess[this.currentIndex]!=quote||this.stringToProcess[this.currentIndex-1]=='\\\\'))\r\n        {\r\n            this.stringBuffer+=this.stringToProcess[this.currentIndex];\r\n            this.currentIndex++;\r\n        }\r\n\r\n        if(this.stringToProcess[this.currentIndex]==quote)\r\n        {\r\n            this.stringBuffer+=quote;\r\n        }\r\n\r\n        return new Token(TokenType.String,this.stringBuffer);\r\n\r\n\r\n    }\r\n\r\n    private IsParentheses(currentChar: string) {\r\n        return currentChar=='('||currentChar==\")\";\r\n    }\r\n\r\n    private IsSymbol(currentChar: string) {\r\n        let symbolList=[',','&','|',';','+','-','/','*'];\r\n        return symbolList.indexOf(currentChar)>=0;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport enum TokenType{\r\n    Method=1,\r\n    Whatever=2,\r\n    Comma=3,\r\n    LParen=4,\r\n    RParen=5,\r\n    String=6,\r\n    Symbol=7\r\n}","import {TokenType} from \"./Lexer\";\r\n\r\nexport class Token{\r\n    constructor(public Type:TokenType,public Value:string)\r\n    {\r\n\r\n    }\r\n}"],"sourceRoot":""}